syntax = "proto3";

option go_package = "khyman.dev/grpc/century-golem/game-server";
option java_package = "dev.khyman.grpc.century-golem.game";
option java_outer_classname = "CenturyGolemProto";


package game_server;

// Interface exported by the server.
service Game {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc GetCard(GetCardMessage) returns (GemCard) {}
  rpc NewGame(CreateGameMessage) returns (CreateGameResponse) {}
  rpc PlayGemCard(PlayGemCardMessage) returns (PlayGemCardResponse) {}
  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  /* rpc GetGame(GameId) returns (GetGameResponse) {} */

  /* // A client-to-server streaming RPC. */
  /* // */
  /* // Accepts a stream of Points on a route being traversed, returning a */
  /* // RouteSummary when traversal is completed. */
  /* rpc GetActions(GameId) returns (stream GameAction) {} */

  /* // A Bidirectional streaming RPC. */
  /* // */
  /* // Accepts a stream of RouteNotes sent while a route is being traversed, */
  /* // while receiving other RouteNotes (e.g. from other users). */
  /* rpc PlayAction(GameAction) returns (Game) {} */
}

message GetCardMessage{
  int32 game_id = 1;
}

message GemValues {
  int32 yellow = 1;
  int32 green = 2;
  int32 blue = 3;
  int32 pink = 4;
}

message GemCard {
  GemValues in = 1;
  GemValues out = 2;
  int32    upgrades = 3;
}

message GolemCard {
  GemValues cost = 1;
  int32 points = 2;
}

message CreateGameMessage {
  int32 player_count = 1;
}

message CreateGameResponse {
  GameState game_state = 1;
}

message GameState { 
  repeated Player players = 1;
  repeated GemCard gem_lineup = 2;
  int32 gem_deck_size = 3;
  repeated GolemCard golem_lineup = 4;
  int32 golem_deck_size = 5;
  repeated GemValues player_gems = 6;
  int32 gold_coins = 7;
  int32 silver_coins = 8;
}

message PlayGemCardMessage {
  int32 game_id = 1;
  GemCard card = 2;
  GemValues discarded = 3;
}

message PlayGemCardResponse {
  GameState game_state = 2;
}

message Player {
  int32 gold_coins = 1;
  int32 silver_coins = 2;
  GemValues gems = 3;
  repeated GolemCard golems = 4;
  repeated GemCard hand = 5;
  repeated GemCard discard_pile = 6;
}
